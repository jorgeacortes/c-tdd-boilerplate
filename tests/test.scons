# Test SCONS script.
# TODO Run all runners after build.
import os
Import('env')
Import('productionCodeObjs')
envTest = env.Clone()

testRelativePath = '..' # With <#> it creates also object files at vendor folder.

unity_path = testRelativePath + '/vendor/Unity/src/'
cmock_path = testRelativePath + '/vendor/CMock/src/'

# --------------- Support libraries ---------------- #
print '[SConscript] test.scons'

# Create lib for Unity and CMock
envTest.Append(
    CPPPATH = [
        unity_path,
        cmock_path,
    ]
)

unity_lib = envTest.StaticLibrary(
    target = 'UnityCmock',
    source = [
        unity_path+'unity.c',
        cmock_path+'cmock.c',
    ]
)

# --------------- Tests -------------------------- #

# Take all sources
tests_sources=[
    Glob('mocks/*.c')
]

#Printing results of the Glob
""" print '*******************'
for items in tests_sources:
    print items
    for i in items:
        print i
print '*******************' """

# Include paths (CPPATHS)
tests_inc = [ 
    'mocks',
]

envTest.Append(
    LIBS = unity_lib,
    CPPPATH = tests_inc
)

testCodeObjs = []
if tests_sources[0]: # If the list of files is not empty.
    print "[Info] tests sources list"
    print "------------------------"
    for source in tests_sources:
        print source[0]
        testCodeObjs.extend(envTest.Object(source))
    print "--------------------------------------------------------------------------------"

# And then we compile the test including the library.
runner1_bin = envTest.Program(
    target = envTest['tgtDir'] + 'testRunner1',
    source = ['runner1.c', productionCodeObjs, testCodeObjs]
)
