#!python
# Main SConscript file for the project
import os
import platform
Import('cwd')
#*************************
# Input arguments definition
#*************************
vars = Variables(None, ARGUMENTS)
vars.AddVariables(
    EnumVariable('BUILD_TYPE', 'type of build to use', 'debug',  allowed_values=('debug', 'release')),
    EnumVariable('MOCK', 'Launch CMock or not', 'no',  allowed_values=('no', 'yes')),
    EnumVariable('TEST_ONLY', 'Compile only tests', 'no',  allowed_values=('no', 'yes')),
    )

#*************************
# Config
#*************************

tgtDir = '#/build/' # <#/Dir> is relative to SConstruct file directory
tgtName = 'app'

ccflags_list = [
    "-Wall", #Show compiler warnings
    #'-O2',  # Breaks Unity?
    #'-m32'
    ]

# Include Path
include_path_list = [ #TODO: Pending to include all header files recursively?
    '#/src/func1/',
    ]

# Common libraries for both app and test
library_path_list = [
    '#/build/src/', 
]

# For including external libraries
library_list =[
    '', 
]

build_scripts = [
    'src/app.scons',    # App project
    'tests/test.scons', # Test project
]

defines_list = [    # List of defines to include
    'TAG1'          # Sample tag in func1, remove as needed
]

# String with all headers files to mock finishing with a space as separation
mocks_list = (      
    cwd + "/src/func1/Mod1.h "
    #cwd + "/src/func1/yyy.h "
)

tools_list = [
    'default'
]

if platform.system()=='Windows':
    tools_list = ['mingw']
    print '[Info] Using MinGw'

#*************************
# Methods
#*************************
def printCCFLAGS():
    print "[Info] Common CCFLAGS =", main_env['CCFLAGS']

# Method for creating all mocks using CMock
def buildMocks():
    cmockpath = os.path.join(cwd,"vendor","CMock","lib","cmock.rb")
    cmockargs = "-o" + os.path.join(cwd,"tests","cmock.yml")
    os.system("ruby "+ cmockpath+ " " + cmockargs + " " + mocks_list )
    exit()

#*************************
# Script
#*************************

print "[Info] Starting project.scons"
print '[Info] cwd = ', cwd

main_env = Environment(
    variables =     vars,               # For input argumetns
    TARGET_ARCH =   'x86',              # Otherwise use x86_64
    CPPPATH =       include_path_list,
    CCFLAGS =       ccflags_list,
    LIBPATH =       library_path_list,
    LIBS =          library_list,
    CPPDEFINES =    defines_list,
    TOOLS =         tools_list,
    tgtDir =        tgtDir,
    tgtName =       tgtName,
    cwd =           cwd
)


#*************************
# Arguments processing
#*************************

if main_env.GetOption('clean'):
    print '[Info] Cleaning extra files.'
    Clean(
        tgtName,              # Target
        [                       # Files or directories to remove
            "#/build/*",        # We can't remove build folder
            "#/tests/mocks",
        ]
    )

if main_env['BUILD_TYPE'] == 'debug':
    main_env.Append(
        CCFLAGS = '-g'  # Debug flag
    )
    print '[Info] Debug build.'

if main_env['BUILD_TYPE'] == 'release':
    print '[Info] Release build.'

if main_env['MOCK'] == 'yes':
    print '[Info] Creating mocks with CMock.'
    buildMocks()

#*************************
# Debug console printing
#*************************
printCCFLAGS()

# Launch all SConscripts
for script in build_scripts:
    env = main_env.Clone()
    SConscript(script, exports=['env'])

print "[Info] Finished main.scons"
